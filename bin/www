#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tictactoe:server');
var http = require('http');

var Game = require('../models/game');
var User = require('../models/user');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = app.io;

var users = [];
var sockets = [];
var gameId = '';

io.attach(server);

io.on('connection', function (socket) {

    socket.on('init game', function (data) {
        users.push(socket);
        console.log("There is " + users.length + " join the loop");

        if (users.length == 1) {
            newGame = new Game({
                created: Date.now(),
                playerOne: data.userId,
                playerTwo: '',
                flag: 'first',
                boards: [
                    ['-', '-', '-'],
                    ['-', '-', '-'],
                    ['-', '-', '-'],
                ]
            });

            Game.createNewGame(newGame, function(err, game){
                if(err) throw err;
                gameId = game.id;
                console.log(gameId);
                socket.join(gameId);
            })
        }else if(users.length == 2){
            var data = {
                playerTwo: data.userId
            };

            Game.updatePlayer2(gameId, data, function(err, game){
                if(err) throw err;
                socket.join(gameId);

                io.in(gameId).emit('start game', game);
                users = [];
                gameId = "";
            })
        }
    });

    socket.on('player move', function(data){
        var update = {
            boards : data.boards,
            flag: data.flag
        };

        Game.updateGamePlay(data.id, update, function(err, game){
            if(err) throw err;

            var feedback = {
                game: game,
                turn: data.turn
            };
            io.in(game.id).emit('update game', feedback);

        });
    });

    socket.on('game winner', function(data){
        User.increaseLose(data.loseId, function(err, user){
            if(err) throw err;

            console.log(user.username+ " lose 1 point");
        });

        User.increaseWin(data.winnerId, function(err, user){
            if(err) throw err;

            console.log(user.username+ " win 1 point");
        });

        Game.deleteGame(data.gameId, function(err, game){
            if(err) throw err;

            console.log("Gameover. Game is deleted.");
        });

        console.log(data);
        io.in(data.gameId._id).emit('game end', data);
    });

    socket.on('tied game', function(data){
        Game.deleteGame(data.gameId, function(err, game){
            if(err) throw err;
            console.log("Game is tied. Game is deleted.");
        });
    });

    socket.on('switch game', function(data){
        socket.join(data.gameId);
        io.in(data.gameId).emit('user joined', data.user);
    });

    socket.on('disconnect', function(){
        var i = users.indexOf(socket);
        users.splice(i, 1);
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
